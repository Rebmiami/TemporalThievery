# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build Testing Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        # configuration: [Debug, Release]
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    permissions:
      contents: write
    env:
      Solution_Name: TemporalThievery.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      #Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      #Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      #Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
    #  uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    #- name: Restore the application
    #  run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #  env:
    #    Configuration: ${{ matrix.configuration }}
        
        
        

    - name: Build MonoGame project
      # You may pin to the exact commit or the version.
      # uses: igotinfected-ci/build-monogame@9317f27298266101efa9dea378e04cfa2f774751
      uses: igotinfected-ci/build-monogame@v2.0.3
      with:
        # .NET version to set up `dotnet` with. Defaults to `3.1.x`.
        dotnet-version: 3.1.x # optional, default is 3.1.x
        # Path to the `.sln`. Used to restore NuGet packages from.
        solution-path: D:\a\TemporalThievery\TemporalThievery\TemporalThievery.sln
        # Path to the `Content.mgcb` file for a specific project. Used to build the MonoGame content files.

    # Note: this may not be required in future releases.

        content-mgcb-path: D:\a\TemporalThievery\TemporalThievery\Content\
        # Platform to build Content files for. E.g.: `Android`.
        content-mgcb-platform: Windows
        # Path to the `.csproj` to build with. This is passed to `msbuild` to initiate the build.

        csproj-path: D:\a\TemporalThievery\TemporalThievery\TemporalThievery.csproj
       # The `msbuild` target to use. E.g.: `PackageForAndroid`.
        build-target: Build
        # The `msbuild` build configuration to use. Defaults to `Release`.
        build-configuration: ${{ matrix.configuration }} # default is Release


    # - name: Display file tree
    #   run: tree C:\
        
    #- name: Compress 
    #  uses: vimtor/action-zip@v1
    #  with:
    #    files: D:\a\TemporalThievery\TemporalThievery\
    #    recursive: false
    #    dest: result.zip

    # Upload artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: TemporalThievery_${{ matrix.configuration }}
        path: D:/a/TemporalThievery/TemporalThievery/bin/${{ matrix.configuration }}/net6.0
        
        
    - uses: vimtor/action-zip@v1
      with:
        files: D:/a/TemporalThievery/TemporalThievery/bin/${{ matrix.configuration }}/net6.0
        recursive: false
        dest: result.zip
    
    - name: Create Release
      uses: ncipollo/release-action@v1.12.0
      with:
        allowUpdates: true
        artifacts: ${{ github.workspace }}/result.zip
        commit: master
        tag: auto
        name: Latest Commit Release
        makeLatest: false
        body: This is an auto-generated release containing the most recent version of Temporal Thievery based on the latest commit. These are NOT finished releases and are intended for testing and debugging.
      
